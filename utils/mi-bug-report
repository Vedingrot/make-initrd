#!/bin/bash -efu
# SPDX-License-Identifier: GPL-3.0-or-later

export LANG=C
export LC_ALL=C

. shell-error
. shell-getopt
. shell-args

print_version() {
	cat <<-EOF
	mi-bug-report version 1.0
	Written by  Alexey Gladkov.

	Copyright (C) 2024  Alexey Gladkov <gladkov.alexey@gmail.com>
	This is free software; see the source for copying conditions.  There is NO
	warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
	EOF
	exit
}

show_help() {
	cat <<-EOF

	Usage: $PROG [<option>] <workdir> <report-archive>

	Options:
	   -v, --verbose          print a message for each action;
	   -V, --version          output version information and exit;
	   -h, --help             display this help and exit.

	Report bugs to authors.

	EOF
	exit
}

if [ -z "${__BUG_REPORT-}" ]; then
	TEMP=`getopt -n "$PROG" -o 'h,v,V' -l 'help,verbose,version' -- "$@"` ||
		show_usage
	eval set -- "$TEMP"

	workdir=/tmp/report

	while :; do
		case "$1" in
			-w|--workdir) shift
				workdir="$(opt_check_dir --workdir "$1")"
				;;
			-h|--help)
				show_help
				;;
			-v|--verbose)
				export verbose="-v"
				;;
			-V|--version)
				print_version
				;;
			--) shift
				break
				;;
			*)
				fatal "Unknown option: $1"
				;;
		esac
		shift
	done

	[ "$#" = 1 ] ||
		fatal "more arguments required"

	mkdir ${verbose-} -- "$workdir"

	verbose "making new mount namespace ..."

	export __BUG_REPORT='setup'

	rc=0
	unshare --mount \
		--wd="$workdir" "$(readlink -ev "$0")" "$@" || rc=$?

	rmdir ${verbose-} -- "$workdir"
	exit $rc

elif [ "${__BUG_REPORT-}" = setup ]; then
	archive="$1"
	shift

	workdir="$PWD"

	verbose "setup workdir $workdir ..."
	mount ${verbose-} -t tmpfs tmpfs "$workdir"
	cd "$workdir"

	for n in \
		dev \
		etc \
		proc \
		sys \
		tmp \
		var/lib \
		virt/home \
		virt/host \
		virt/proc;
	do
		mkdir ${verbose-} -p -- "./$n"
	done

	mount ${verbose-} --bind -o ro / ./virt/host

	for n in "/home" "/usr" "/var"; do
		! mountpoint -q "$n" ||
			mount ${verbose-} --bind -o ro "$n" ./virt/host"$n"
	done

	for n in \
		bin \
		etc/alternatives \
		etc/ld.so.cache \
		etc/ld.so.conf \
		etc/protocols \
		etc/rpc \
		etc/services \
		home \
		lib \
		lib64 \
		sbin \
		usr;
	do
		[ -e "./$n" ] || [ -L "./$n" ] ||
			ln ${verbose-} -snr -- ./virt/host/"$n" ./"$n"
	done

	verbose "unpacking archive $archive ..."
	{
		tar --strip-components=1 -xf "$archive"
	}
	verbose "unpacked"

	if ! mountpoint -q dev; then
		makenod() { [ -e dev/$1 ] || mknod dev/$1 $2 $3 $4; }
		makenod ram     b 1 1
		makenod null    c 1 3
		makenod zero    c 1 5
		makenod full    c 1 7
		makenod random  c 1 8
		makenod ptmx    c 5 2
	fi

	if ! mountpoint -q proc; then
		mount -t proc proc virt/proc

		makeln() { [ -e "$2" ] || ln ${verbose-} -snf -- "$1" "$2"; }
		makeln /virt/proc/self        proc/self
		makeln /virt/proc/thread-self proc/thread-self
		makeln /virt/proc/self/fd     proc/self/fd
		makeln /virt/proc/self/fdinfo proc/self/fdinfo
		makeln /virt/proc/self/fd     dev/fd
		makeln /virt/proc/self/fd/0   dev/stdin
		makeln /virt/proc/self/fd/1   dev/stdout
		makeln /virt/proc/self/fd/2   dev/stderr
	fi

	if [ -d lib ]; then
		mv ${verbose-} -- lib virt/lib
		ln ${verbose-} -snr -- ./virt/host/lib lib

		mount ${verbose-} --bind virt/lib/modules lib/modules
	fi

	[ -f etc/passwd ] || printf 'root:x:0:0:root:/virt/home:/bin/bash\n' > etc/passwd
	[ -f etc/group  ] || printf 'root:x:0:\n' > etc/group

	[ -f etc/initrd.mk ] ||
		cat > etc/initrd.mk <<-EOF
		AUTODETECT = all
		EOF

	cat > virt/home/.bashrc <<-'EOF'
	alias cp='cp -i'
	alias mv='mv -i'
	alias rm='rm -i'
	alias l='ls -la'
	EOF

	export __BUG_REPORT='shell'

	exec unshare --root="$workdir" --wd=/ "$0" ||
		fatal "stage=$MAKE_INITRD_BUG_REPORT: exec failed"

elif [ "${__BUG_REPORT-}" = shell ]; then
	kver=$(find /lib/modules/ -mindepth 1 -maxdepth 1 -printf '%f' -quit ||:)

	kmodules="$(find "lib/modules/$kver/kernel" -name '*.ko*' -print -quit 2>/dev/null ||:)"
	[ -n "$kmodules" ] ||
		message "WARNING: There are no modules in the directory: /lib/modules/$kver/kernel"

	export KERN="$kver"
	export HOME=/virt/home
	export TMPDIR=/tmp
	export PS1='[report ($KERN) \W]# '
	export MAKE_INITRD_BUG_REPORT=1

	exec /bin/bash ||
		fatal "stage=$MAKE_INITRD_BUG_REPORT: exec failed"
fi

fatal "unknown condition"
